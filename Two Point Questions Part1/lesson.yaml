- Class: meta
  Course: Test
  Lesson: Two Point Questions
  Author: Vygantas Butkus
  Type: Standard
  Organization: Vilnius University
  Version: 0.1.1

- Class: text
  Output: Each question in this part of the test is worth 2 points. Total sum of points for this part is 42. Good luck!      
  
- Class: cmd_question
  Output: Now store the contents of the 'cars$mpgCity' in a new variable called 'myMPG'.
  CorrectAnswer: myMPG <- cars$mpgCity
  AnswerTests: omnitest(correctExpr='myMPG <- cars$mpgCity')

- Class: cmd_question
  Output: Compute the mean value for the 'myMPG' variable now.
  CorrectAnswer: mean(myMPG)
  AnswerTests: omnitest(correctExpr='mean(myMPG)')

- Class: cmd_question
  Output: Use a function to create a table to see how many times each value appears for your 'myMPG' variable.
  CorrectAnswer: table(myMPG)
  AnswerTests: omnitest(correctExpr='table(myMPG)')

- Class: figure
  Output: Now, let's take a look back at the histogram we made earlier, which represents the distribution of the values for city MPG for each of the 54 cars from our 'cars' data set. 
  Figure: mod1_histogram.R
  FigureType: new

- Class: mult_question
  Output: How would you classify the shape of the distribution represented by this histogram?
  AnswerChoices: Symmetric; Right-skewed; Left-skewed
  CorrectAnswer: Right-skewed
  AnswerTests: omnitest(correctVal= 'Right-skewed')
  
- Class: mult_question
  Output: Referring to the histogram above, and keeping in mind the real shape of the distribution, would you expect the MEDIAN to be greater than, less than, or equal to the MEAN?
  AnswerChoices: Greater than; Less than; Equal to
  CorrectAnswer: Less than
  AnswerTests: omnitest(correctVal= 'Less than')

- Class: cmd_question
  Output: In R, you can use a command to easily calculate the variance of a particular set of data. Try calculating the variance for the data 'cars$price'.
  CorrectAnswer: var(cars$price)
  AnswerTests: omnitest(correctExpr= 'var(cars$price)')

- Class: cmd_question
  Output: The easiest way to create a vector is with the function, which stands for 'concatenate' or 'combine'. Create a vector containing the numbers 1.1, 9, and 3.14 and store the result in a variable called z.
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  
- Class: cmd_question
  Output: Take the square root of z - 1 and assign it to a new variable called my_sqrt.
  CorrectAnswer: my_sqrt <- sqrt(z - 1)
  AnswerTests: any_of_exprs('my_sqrt <- sqrt(z - 1)', 'my_sqrt <- (z - 1)^0.5')  
  
- Class: mult_question
  Output: Before we view the contents of the my_sqrt variable, what do you think it contains?
  CorrectAnswer: a vector of length 3
  AnswerChoices: a vector of length 3; a single number (i.e a vector of length 1); a vector of length 0 (i.e. an empty vector)
  AnswerTests: omnitest(correctVal='a vector of length 3')
  
- Class: cmd_question
  Output: Now, create a new variable called my_div that gets the value of z divided by my_sqrt.
  CorrectAnswer: my_div <- z / my_sqrt
  AnswerTests: omnitest(correctExpr='my_div <- z / my_sqrt')
  
- Class: mult_question
  Output: Which statement do you think is true?
  CorrectAnswer: The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on...
  AnswerChoices: The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on...; my_div is a single number (i.e a vector of length 1); my_div is undefined
  AnswerTests: omnitest(correctVal='The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on...')

- Class: cmd_question
  Output: I've stored the dataset in a variable called flags. Preview the first six lines (i.e. the 'head') of the dataset.
  CorrectAnswer: head(flags)
  AnswerTests: omnitest(correctExpr='head(flags)')
  
- Class: cmd_question
  Output:  We want to know the total number of countries (in our dataset) with the color orange on their flag, we can just add up all of the 1s and 0s in the 'orange' column. Use a function to get the number of orange flags in the data 'flags$orange'.
  CorrectAnswer: sum(flags$orange)
  AnswerTests: omnitest(correctExpr='sum(flags$orange)')
  
- Class: cmd_question
  Output: Extract columns 19 through 23 from the 'flags' dataset and store the result in a new data frame called 'flag_shapes'.
  CorrectAnswer: flag_shapes <- flags[, 19:23]
  AnswerTests: omnitest(correctExpr='flag_shapes <- flags[, 19:23]')
  
- Class: cmd_question
  Output: The range() function returns the minimum and maximum of its first argument, which should be a numeric vector. Apply the range function to each column of flag_shapes. (This function starts with the letter 's')
  CorrectAnswer: sapply(flag_shapes, range)
  AnswerTests: omnitest(correctExpr='sapply(flag_shapes, range)')
  
- Class: mult_question
  Output: "What do you think the following expression will evaluate to?: (TRUE != FALSE) == !(6 == 7)"
  CorrectAnswer: TRUE
  AnswerChoices: TRUE; FALSE; Can there be objective truth when programming?; %>%
  AnswerTests: omnitest(correctVal='TRUE')
  
- Class : cmd_question
  Output: For the next few questions, we're going to need to create a vector of integers called ints. Get a sample of 10 numbers and store it in variable 'ints'.
  CorrectAnswer: "ints <- sample(10)"
  AnswerTests: omnitest(correctExpr='ints <- sample(10)')
  
- Class : cmd_question
  Output: Use a function to find the indicies of ints that are greater than 7. In other words, which numbers are greater than 7?
  CorrectAnswer: "which(ints > 7)"
  AnswerTests: omnitest(correctExpr='which(ints > 7)')
  
- Class: mult_question
  Output: Which of the following evaluates to TRUE?
  CorrectAnswer: "any(ints == 10)"
  AnswerChoices: "any(ints == 10); all(ints == 10); all(c(TRUE, FALSE, TRUE)); any(ints == 2.5)"
  AnswerTests: omnitest(correctVal='any(ints == 10)')
  
- Class: cmd_question
  Output: "Return a character vector of column names from dataset 'plants'."
  CorrectAnswer: names(plants)
  AnswerTests: omnitest(correctExpr='names(plants)')
  
- Class: cmd_question
  Output: "Preview the last 15 rows of the dataset 'plants'."
  CorrectAnswer: tail(plants, 15)
  AnswerTests: omnitest(correctExpr='tail(plants, 15)')


- Class: text
  Output: Congratulations on finishing this part of the test! 
  
- Class: mult_question
  Output: Would you like to submit the log of this lesson to Google Forms so that your instructor may evaluate your progress?
  AnswerChoices: Yes
  CorrectAnswer: NULL
  AnswerTests: submition()
