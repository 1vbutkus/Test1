- Class: meta
  Course: Test
  Lesson: Two Point Questions
  Author: Vygantas Butkus
  Type: Standard
  Organization: Vilnius University
  Version: 0.1.1

- Class: text
  Output: Each question in this part of the test is worth 2 points. Total sum of points for this part is 80. Good luck!      
  
- Class: cmd_question
  Output: Now store the contents of the 'cars$mpgCity' in a new variable called 'myMPG'.
  CorrectAnswer: myMPG <- cars$mpgCity
  AnswerTests: omnitest(correctExpr='myMPG <- cars$mpgCity')

- Class: cmd_question
  Output: Compute the mean value for the 'myMPG' variable now.
  CorrectAnswer: mean(myMPG)
  AnswerTests: omnitest(correctExpr='mean(myMPG)')

- Class: cmd_question
  Output: Use a function to create a table to see how many times each value appears for your 'myMPG' variable.
  CorrectAnswer: table(myMPG)
  AnswerTests: omnitest(correctExpr='table(myMPG)')

- Class: figure
  Output: Now, let's take a look back at the histogram we made earlier, which represents the distribution of the values for city MPG for each of the 54 cars from our 'cars' data set. 
  Figure: mod1_histogram.R
  FigureType: new

- Class: mult_question
  Output: How would you classify the shape of the distribution represented by this histogram?
  AnswerChoices: Symmetric; Right-skewed; Left-skewed
  CorrectAnswer: Right-skewed
  AnswerTests: omnitest(correctVal= 'Right-skewed')
  
- Class: mult_question
  Output: Referring to the histogram above, and keeping in mind the real shape of the distribution, would you expect the MEDIAN to be greater than, less than, or equal to the MEAN?
  AnswerChoices: Greater than; Less than; Equal to
  CorrectAnswer: Less than
  AnswerTests: omnitest(correctVal= 'Less than')

- Class: cmd_question
  Output: In R, you can use a command to easily calculate the variance of a particular set of data. Try calculating the variance for the data 'cars$price'.
  CorrectAnswer: var(cars$price)
  AnswerTests: omnitest(correctExpr= 'var(cars$price)')

- Class: cmd_question
  Output: The easiest way to create a vector is with the function, which stands for 'concatenate' or 'combine'. Create a vector containing the numbers 1.1, 9, and 3.14 and store the result in a variable called z.
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  
- Class: cmd_question
  Output: Take the square root of z - 1 and assign it to a new variable called my_sqrt.
  CorrectAnswer: my_sqrt <- sqrt(z - 1)
  AnswerTests: any_of_exprs('my_sqrt <- sqrt(z - 1)', 'my_sqrt <- (z - 1)^0.5')  
  
- Class: mult_question
  Output: Before we view the contents of the my_sqrt variable, what do you think it contains?
  CorrectAnswer: a vector of length 3
  AnswerChoices: a vector of length 3; a single number (i.e a vector of length 1); a vector of length 0 (i.e. an empty vector)
  AnswerTests: omnitest(correctVal='a vector of length 3')
  
- Class: cmd_question
  Output: Now, create a new variable called my_div that gets the value of z divided by my_sqrt.
  CorrectAnswer: my_div <- z / my_sqrt
  AnswerTests: omnitest(correctExpr='my_div <- z / my_sqrt')
  
- Class: mult_question
  Output: Which statement do you think is true?
  CorrectAnswer: The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on...
  AnswerChoices: The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on...; my_div is a single number (i.e a vector of length 1); my_div is undefined
  AnswerTests: omnitest(correctVal='The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on...')

- Class: cmd_question
  Output: I've stored the dataset in a variable called flags. Preview the first six lines (i.e. the 'head') of the dataset.
  CorrectAnswer: head(flags)
  AnswerTests: omnitest(correctExpr='head(flags)')
  
- Class: cmd_question
  Output:  We want to know the total number of countries (in our dataset) with the color orange on their flag, we can just add up all of the 1s and 0s in the 'orange' column. Use a function to get the number of orange flags in the data 'flags$orange'.
  CorrectAnswer: sum(flags$orange)
  AnswerTests: omnitest(correctExpr='sum(flags$orange)')
  
- Class: cmd_question
  Output: Extract columns 19 through 23 from the 'flags' dataset and store the result in a new data frame called 'flag_shapes'.
  CorrectAnswer: flag_shapes <- flags[, 19:23]
  AnswerTests: omnitest(correctExpr='flag_shapes <- flags[, 19:23]')
  
- Class: cmd_question
  Output: The range() function returns the minimum and maximum of its first argument, which should be a numeric vector. Apply the range function to each column of flag_shapes. (This function starts with the letter 's')
  CorrectAnswer: sapply(flag_shapes, range)
  AnswerTests: omnitest(correctExpr='sapply(flag_shapes, range)')
  
- Class: mult_question
  Output: "What do you think the following expression will evaluate to?: (TRUE != FALSE) == !(6 == 7)"
  CorrectAnswer: TRUE
  AnswerChoices: TRUE; FALSE; Can there be objective truth when programming?; %>%
  AnswerTests: omnitest(correctVal='TRUE')
  
- Class : cmd_question
  Output: For the next few questions, we're going to need to create a vector of integers called ints. Get a sample of 10 numbers and store it in variable 'ints'.
  CorrectAnswer: "ints <- sample(10)"
  AnswerTests: omnitest(correctExpr='ints <- sample(10)')
  
- Class : cmd_question
  Output: Use a function to find the indicies of ints that are greater than 7. In other words, which numbers are greater than 7?
  CorrectAnswer: "which(ints > 7)"
  AnswerTests: omnitest(correctExpr='which(ints > 7)')
  
- Class: mult_question
  Output: Which of the following evaluates to TRUE?
  CorrectAnswer: "any(ints == 10)"
  AnswerChoices: "any(ints == 10); all(ints == 10); all(c(TRUE, FALSE, TRUE)); any(ints == 2.5)"
  AnswerTests: omnitest(correctVal='any(ints == 10)')
  

- Class: cmd_question
  Output: "Return a character vector of column names from dataset 'plants'."
  CorrectAnswer: names(plants)
  AnswerTests: omnitest(correctExpr='names(plants)')
  
- Class: cmd_question
  Output: "Preview the last 15 rows of the dataset 'plants'."
  CorrectAnswer: tail(plants, 15)
  AnswerTests: omnitest(correctExpr='tail(plants, 15)')

- Class: cmd_question
  Output: "Create a vector 'z' containing 1000 NAs. (Repeat NA a thousand times)"
  CorrectAnswer: z <- rep(NA, 1000)
  AnswerTests: omnitest(correctExpr='z <- rep(NA, 1000)')
  
- Class: cmd_question
  Output: Use a function to determine whether there are any NAs or where our NAs are located in our data. (Dataset 'my_data')
  CorrectAnswer: is.na(my_data)
  AnswerTests: omnitest(correctExpr='is.na(my_data)')

- Class: cmd_question
  Output: Simulate rolling four six-sided dice. (Dont forget that replace = TRUE)
  CorrectAnswer: sample(1:6, 4, replace = TRUE)
  AnswerTests: match_call('sample(1:6, 4, replace = TRUE)')
  
- Class: cmd_question
  Output: The standard normal distribution has mean 0 and standard deviation 1. Default values for the 'mean' and 'sd' arguments to this function are 0 and 1, respectively. Generate 10 random numbers from a standard normal distribution.
  CorrectAnswer: rnorm(10)
  AnswerTests: omnitest('rnorm(10)')
  
- Class: cmd_question
  Output: Now do the same, except with a mean of 100 and a standard deviation of 25.
  CorrectAnswer: rnorm(10, 100, 25)
  AnswerTests: match_call('rnorm(10, 100, 25)')

- Class: cmd_question
  Output: "View the first ten elements of x. (Hint: Don't use functions, only operators.)"
  CorrectAnswer: x[1:10]
  AnswerTests: omnitest(correctExpr='x[1:10]')

- Class: cmd_question
  Output: "Now, create a variable called tf that gets the result of which numbers in 'x' are less than 1. (Hint: Don't use functions, only operators.)"
  CorrectAnswer: tf <- x < 1
  AnswerTests: omnitest(correctExpr='tf <- x < 1')
  
- Class: mult_question
  Output: What do you think tf will look like?
  CorrectAnswer: a vector of n logical values
  AnswerChoices: a vector of n logical values; a single logical value
  AnswerTests: omnitest(correctVal='a vector of n logical values')
  
- Class: mult_question
  Output: ((111 >= 111) | !(TRUE)) & ((4 + 1) == 5)
  CorrectAnswer: 'TRUE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='TRUE')
  
- Class: cmd_question
  Output: "Use a function to combine two character vectors that are each of length 1 (i.e. join two words). Try it on these two words: 'Hello', 'world!'. Don't forget the `sep` argument which tells R that we want to separate the joined elements with a single space."
  CorrectAnswer: paste("Hello", "world!", sep = " ")
  AnswerTests: omnitest(correctExpr='paste("Hello", "world!", sep = " ")')

- Class: mult_question
  Output: For simplicity, we usually say that Bernoulli random variables take only the values 1 and 0. Suppose we also specify that the probability that the Bernoulli outcome of 1 is p. Which of the following represents the probability of a 0 outcome? 
  AnswerChoices: p; 1-p; p^2; p(1-p)
  CorrectAnswer: 1-p
  AnswerTests: omnitest(correctVal='1-p')
  
- Class: mult_question
  Output: Which of the following expressions represents P(A&B), where A is the event of rolling a 3 and B is the event of the roll being odd?
  AnswerChoices: 1/6; 1/2; 1/3; 1/4; 1 
  CorrectAnswer: 1/6
  AnswerTests: omnitest(correctVal='1/6')
  
- Class: mult_question
  Output: "What's the probability of rolling a '6' twice in a row using a fair die?"
  AnswerChoices: 1/6; 2/6; 1/36; 1/2
  CorrectAnswer: 1/36
  AnswerTests: omnitest(correctVal='1/36')

- Class: cmd_question
  Output: Consider the random variable X representing a roll of a fair dice. By 'fair' we mean all the sides are equally likely to appear. What is the expected value of X? 
  CorrectAnswer: 3.5
  AnswerTests: equiv_val(3.5)

- Class: mult_question
  Output: True or False? A population mean estimates a sample mean.
  AnswerChoices: True; False
  CorrectAnswer: False
  AnswerTests: omnitest(correctVal='False')
  
- Class: mult_question
  Output: True or False? A sample mean is unbiased.
  AnswerChoices: True; False
  CorrectAnswer: True
  AnswerTests: omnitest(correctVal='True')
  
- Class: mult_question
  Output: Suppose you rolled the fair die twice in succession. What is the probability of rolling two 4's?
  AnswerChoices: 1/36; 2/6; 0; 1/6
  CorrectAnswer: 1/36
  AnswerTests: omnitest(correctVal='1/36')
  
- Class: mult_question
  Output: Is the drawing of a hand of cards continuous or discrete?
  AnswerChoices:  discrete; continuous;
  CorrectAnswer: discrete
  AnswerTests: omnitest(correctVal='discrete')

- Class: mult_question
  Output: Each X_i comes from a population with variance sigma^2. What does Sum(Var(X_i)) equal? As before, Sum is taken over n values.
  AnswerChoices: n*(sigma)^2; n*mu; n*E(mu); (n^2)*Var(sigma)
  CorrectAnswer: n*(sigma)^2
  AnswerTests: omnitest(correctVal='n*(sigma)^2')

- Class: text
  Output: Congratulations on finishing this part of the test! 
  
- Class: mult_question
  Output: Would you like to submit the log of this lesson to Google Forms so that your instructor may evaluate your progress?
  AnswerChoices: Yes
  CorrectAnswer: NULL
  AnswerTests: submition()
